1. Binary Search
public class BinarySearchAlgo {
    public static void main(String[] args) {
        int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int search = 9;
        int lo = 0;
        int high = arr.length - 1;
        int mid = lo + (high - lo) / 2;         //using mid=lo+(high-lo)/2 is good to avoid Integer overflow rather than using mid=(lo+high)/2

        while (lo <= mid) {
            if (arr[mid] == search) {
                System.out.println("element is at " + mid + " index");
                break;
            } else if (arr[mid] < search) {
                lo = mid + 1;
            } else {
                high = mid - 1;
            }
            mid = lo + (high - lo) / 2;
        }
        if (lo > high) {
            System.out.println("element not found");
        }
    }
}


2. Kadane's Algorithm
private static void maxSubArraySum(int[] a) {
        int maxSum = 0;
        int curSum = 0;
        for (int i = 0; i < a.length; i++) {
            curSum += a[i];
            if (curSum > maxSum) {
                maxSum = curSum;
            }
            if (curSum < 0) {
                curSum = 0;
            }
        }
        System.out.println(maxSum);
    }


3. BFS (Breadth First Search) of Binary Tree
    public void printLevelOrder(Node root)
    {
        Queue<Node> queue = new LinkedList<Node>();
        queue.add(root);
        while (!queue.isEmpty()) {
            Node tempNode = queue.poll();
            System.out.print(tempNode.data + " ");
            if (tempNode.left != null) {
                queue.add(tempNode.left);
            }
            if (tempNode.right != null) {
                queue.add(tempNode.right);
            }
        }
    }

//Second Method (BFS)
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        List<List<Integer>> list = new LinkedList<List<Integer>>();
        if(root == null) return list;
        queue.offer(root);
        while(!queue.isEmpty()){
            int levelNum = queue.size();
            List<Integer> subList = new LinkedList<Integer>();
            for(int i=0; i<levelNum; i++){
                if(queue.peek().left != null) queue.offer(queue.peek().left);
                if(queue.peek().right != null) queue.offer(queue.peek().right);
                subList.add(queue.poll().val);
            }
            list.add(subList);
        }
        return list;
    }


4. Bubble Sort
private static void bubbleSort(int[] a) {
        int temp;
        for(int i=0; i< a.length; i++){
            int flag=0;
            for(int j=0; j< a.length-1; j++){
                if(a[j]>a[j+1]){
                    temp=a[j];
                    a[j]=a[j+1];
                    a[j+1]=temp;
                    flag=1;
                }
            }
            if(flag==0){
                break;
            }
        }
        for(int i=0; i< a.length; i++){
            System.out.print(a[i]+ " ");
        }
    }
	

5. Selection Sort
private static void selectionSort(int[] a) {
        int min=0, temp=0;
        for(int i =0;i<a.length;i++){
            min=i;
            for(int j=i+1;j< a.length;j++){
                if(a[j]<a[min]){
                    min=j;
                }
                temp=a[i];
                a[i]=a[min];
                a[min]=temp;
            }
        }
        for(int i=0; i< a.length; i++) {
            System.out.print(a[i] + " ");
        }
    }


6. Insertion Sort
private static void insertionSort(int[] a) {
        int temp, j;
        for (int i = 1; i < a.length; i++) {
            temp = a[i];
            j = i;
            while (j > 0 && a[j - 1] > temp) {
                a[j] = a[j - 1];
                j = j - 1;
            }
            a[j] = temp;
        }
        for (int i = 0; i < a.length; i++) {
            System.out.print(a[i] + " ");
        }
    }

